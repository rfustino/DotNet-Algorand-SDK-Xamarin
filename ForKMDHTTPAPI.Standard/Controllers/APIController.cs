/*
 * ForKMDHTTPAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using ForKMDHTTPAPI.Standard;
using ForKMDHTTPAPI.Standard.Utilities;
using ForKMDHTTPAPI.Standard.Http.Request;
using ForKMDHTTPAPI.Standard.Http.Response;
using ForKMDHTTPAPI.Standard.Http.Client;
using ForKMDHTTPAPI.Standard.Exceptions;

namespace ForKMDHTTPAPI.Standard.Controllers
{
    public partial class APIController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static APIController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static APIController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new APIController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Returns the entire swagger spec in json.
        /// </summary>
        /// <return>Returns the string response from the API call</return>
        public string GetSwaggerHandler()
        {
            Task<string> t = GetSwaggerHandlerAsync();
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the entire swagger spec in json.
        /// </summary>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> GetSwaggerHandlerAsync()
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/swagger.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
                throw new APIException(@"Unknown Error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Generates the next key in the deterministic key sequence (as determined by the master derivation key) and adds it to the wallet, returning the public key.
        /// </summary>
        /// <param name="generateKeyRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTKeyResponse response from the API call</return>
        public Models.APIV1POSTKeyResponse CreateGenerateKey(Models.GenerateKeyRequest generateKeyRequest)
        {
            Task<Models.APIV1POSTKeyResponse> t = CreateGenerateKeyAsync(generateKeyRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Generates the next key in the deterministic key sequence (as determined by the master derivation key) and adds it to the wallet, returning the public key.
        /// </summary>
        /// <param name="generateKeyRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTKeyResponse response from the API call</return>
        public async Task<Models.APIV1POSTKeyResponse> CreateGenerateKeyAsync(Models.GenerateKeyRequest generateKeyRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/key");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(generateKeyRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTKeyResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes the key with the passed public key from the wallet.
        /// </summary>
        /// <param name="deleteKeyRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1DELETEKeyResponse response from the API call</return>
        public Models.APIV1DELETEKeyResponse DeleteKey(Models.DeleteKeyRequest deleteKeyRequest)
        {
            Task<Models.APIV1DELETEKeyResponse> t = DeleteKeyAsync(deleteKeyRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Deletes the key with the passed public key from the wallet.
        /// </summary>
        /// <param name="deleteKeyRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1DELETEKeyResponse response from the API call</return>
        public async Task<Models.APIV1DELETEKeyResponse> DeleteKeyAsync(Models.DeleteKeyRequest deleteKeyRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/key");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(deleteKeyRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.DeleteBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1DELETEKeyResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Export the secret key associated with the passed public key.
        /// </summary>
        /// <param name="exportKeyRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTKeyExportResponse response from the API call</return>
        public Models.APIV1POSTKeyExportResponse CreateExportKey(Models.ExportKeyRequest exportKeyRequest)
        {
            Task<Models.APIV1POSTKeyExportResponse> t = CreateExportKeyAsync(exportKeyRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Export the secret key associated with the passed public key.
        /// </summary>
        /// <param name="exportKeyRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTKeyExportResponse response from the API call</return>
        public async Task<Models.APIV1POSTKeyExportResponse> CreateExportKeyAsync(Models.ExportKeyRequest exportKeyRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/key/export");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(exportKeyRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTKeyExportResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Import an externally generated key into the wallet. Note that if you wish to back up the imported key, you must do so by backing up the entire wallet database, because imported keys were not derived from the wallet's master derivation key.
        /// </summary>
        /// <param name="importKeyRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTKeyImportResponse response from the API call</return>
        public Models.APIV1POSTKeyImportResponse CreateImportKey(Models.ImportKeyRequest importKeyRequest)
        {
            Task<Models.APIV1POSTKeyImportResponse> t = CreateImportKeyAsync(importKeyRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Import an externally generated key into the wallet. Note that if you wish to back up the imported key, you must do so by backing up the entire wallet database, because imported keys were not derived from the wallet's master derivation key.
        /// </summary>
        /// <param name="importKeyRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTKeyImportResponse response from the API call</return>
        public async Task<Models.APIV1POSTKeyImportResponse> CreateImportKeyAsync(Models.ImportKeyRequest importKeyRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/key/import");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(importKeyRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTKeyImportResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Lists all of the public keys in this wallet. All of them have a stored private key.
        /// </summary>
        /// <param name="listKeysRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTKeyListResponse response from the API call</return>
        public Models.APIV1POSTKeyListResponse CreateListKeysInWallet(Models.ListKeysRequest listKeysRequest)
        {
            Task<Models.APIV1POSTKeyListResponse> t = CreateListKeysInWalletAsync(listKeysRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Lists all of the public keys in this wallet. All of them have a stored private key.
        /// </summary>
        /// <param name="listKeysRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTKeyListResponse response from the API call</return>
        public async Task<Models.APIV1POSTKeyListResponse> CreateListKeysInWalletAsync(Models.ListKeysRequest listKeysRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/key/list");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(listKeysRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTKeyListResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Export the master derivation key from the wallet. This key is a master "backup" key for the underlying wallet. With it, you can regenerate all of the wallets that have been generated with this wallet's `POST /v1/key` endpoint. This key will not allow you to recover keys imported from other wallets, however.
        /// </summary>
        /// <param name="exportMasterKeyRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMasterKeyExportResponse response from the API call</return>
        public Models.APIV1POSTMasterKeyExportResponse CreateExportMasterKey(Models.ExportMasterKeyRequest exportMasterKeyRequest)
        {
            Task<Models.APIV1POSTMasterKeyExportResponse> t = CreateExportMasterKeyAsync(exportMasterKeyRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Export the master derivation key from the wallet. This key is a master "backup" key for the underlying wallet. With it, you can regenerate all of the wallets that have been generated with this wallet's `POST /v1/key` endpoint. This key will not allow you to recover keys imported from other wallets, however.
        /// </summary>
        /// <param name="exportMasterKeyRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMasterKeyExportResponse response from the API call</return>
        public async Task<Models.APIV1POSTMasterKeyExportResponse> CreateExportMasterKeyAsync(Models.ExportMasterKeyRequest exportMasterKeyRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/master-key/export");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(exportMasterKeyRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTMasterKeyExportResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes multisig preimage information for the passed address from the wallet.
        /// </summary>
        /// <param name="deleteMultisigRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1DELETEMultisigResponse response from the API call</return>
        public Models.APIV1DELETEMultisigResponse DeleteMultisig(Models.DeleteMultisigRequest deleteMultisigRequest)
        {
            Task<Models.APIV1DELETEMultisigResponse> t = DeleteMultisigAsync(deleteMultisigRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Deletes multisig preimage information for the passed address from the wallet.
        /// </summary>
        /// <param name="deleteMultisigRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1DELETEMultisigResponse response from the API call</return>
        public async Task<Models.APIV1DELETEMultisigResponse> DeleteMultisigAsync(Models.DeleteMultisigRequest deleteMultisigRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/multisig");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(deleteMultisigRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.DeleteBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1DELETEMultisigResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Given a multisig address whose preimage this wallet stores, returns the information used to generate the address, including public keys, threshold, and multisig version.
        /// </summary>
        /// <param name="exportMultisigRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMultisigExportResponse response from the API call</return>
        public Models.APIV1POSTMultisigExportResponse CreateExportMultisig(Models.ExportMultisigRequest exportMultisigRequest)
        {
            Task<Models.APIV1POSTMultisigExportResponse> t = CreateExportMultisigAsync(exportMultisigRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Given a multisig address whose preimage this wallet stores, returns the information used to generate the address, including public keys, threshold, and multisig version.
        /// </summary>
        /// <param name="exportMultisigRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMultisigExportResponse response from the API call</return>
        public async Task<Models.APIV1POSTMultisigExportResponse> CreateExportMultisigAsync(Models.ExportMultisigRequest exportMultisigRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/multisig/export");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(exportMultisigRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTMultisigExportResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Generates a multisig account from the passed public keys array and multisig metadata, and stores all of this in the wallet.
        /// </summary>
        /// <param name="importMultisigRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMultisigImportResponse response from the API call</return>
        public Models.APIV1POSTMultisigImportResponse CreateImportMultisig(Models.ImportMultisigRequest importMultisigRequest)
        {
            Task<Models.APIV1POSTMultisigImportResponse> t = CreateImportMultisigAsync(importMultisigRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Generates a multisig account from the passed public keys array and multisig metadata, and stores all of this in the wallet.
        /// </summary>
        /// <param name="importMultisigRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMultisigImportResponse response from the API call</return>
        public async Task<Models.APIV1POSTMultisigImportResponse> CreateImportMultisigAsync(Models.ImportMultisigRequest importMultisigRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/multisig/import");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(importMultisigRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTMultisigImportResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Lists all of the multisig accounts whose preimages this wallet stores
        /// </summary>
        /// <param name="listMultisigRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMultisigListResponse response from the API call</return>
        public Models.APIV1POSTMultisigListResponse CreateListMultisg(Models.ListMultisigRequest listMultisigRequest)
        {
            Task<Models.APIV1POSTMultisigListResponse> t = CreateListMultisgAsync(listMultisigRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Lists all of the multisig accounts whose preimages this wallet stores
        /// </summary>
        /// <param name="listMultisigRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMultisigListResponse response from the API call</return>
        public async Task<Models.APIV1POSTMultisigListResponse> CreateListMultisgAsync(Models.ListMultisigRequest listMultisigRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/multisig/list");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(listMultisigRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTMultisigListResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Start a multisig signature, or add a signature to a partially completed multisig signature object.
        /// </summary>
        /// <param name="signMultisigTransactionRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMultisigTransactionSignResponse response from the API call</return>
        public Models.APIV1POSTMultisigTransactionSignResponse CreateSignMultisigTransaction(Models.SignMultisigRequest signMultisigTransactionRequest)
        {
            Task<Models.APIV1POSTMultisigTransactionSignResponse> t = CreateSignMultisigTransactionAsync(signMultisigTransactionRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Start a multisig signature, or add a signature to a partially completed multisig signature object.
        /// </summary>
        /// <param name="signMultisigTransactionRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMultisigTransactionSignResponse response from the API call</return>
        public async Task<Models.APIV1POSTMultisigTransactionSignResponse> CreateSignMultisigTransactionAsync(Models.SignMultisigRequest signMultisigTransactionRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/multisig/sign");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(signMultisigTransactionRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTMultisigTransactionSignResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Start a multisig signature, or add a signature to a partially completed multisig signature object.
        /// </summary>
        /// <param name="signMultisigProgramRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMultisigProgramSignResponse response from the API call</return>
        public Models.APIV1POSTMultisigProgramSignResponse CreateSignMultisigProgram(Models.SignProgramMultisigRequest signMultisigProgramRequest)
        {
            Task<Models.APIV1POSTMultisigProgramSignResponse> t = CreateSignMultisigProgramAsync(signMultisigProgramRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Start a multisig signature, or add a signature to a partially completed multisig signature object.
        /// </summary>
        /// <param name="signMultisigProgramRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTMultisigProgramSignResponse response from the API call</return>
        public async Task<Models.APIV1POSTMultisigProgramSignResponse> CreateSignMultisigProgramAsync(Models.SignProgramMultisigRequest signMultisigProgramRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/multisig/signprogram");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(signMultisigProgramRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTMultisigProgramSignResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Signs the passed program with a key from the wallet, determined by the account named in the request.
        /// </summary>
        /// <param name="signProgramRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTProgramSignResponse response from the API call</return>
        public Models.APIV1POSTProgramSignResponse CreateSignProgram(Models.SignProgramRequest signProgramRequest)
        {
            Task<Models.APIV1POSTProgramSignResponse> t = CreateSignProgramAsync(signProgramRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Signs the passed program with a key from the wallet, determined by the account named in the request.
        /// </summary>
        /// <param name="signProgramRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTProgramSignResponse response from the API call</return>
        public async Task<Models.APIV1POSTProgramSignResponse> CreateSignProgramAsync(Models.SignProgramRequest signProgramRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/program/sign");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(signProgramRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTProgramSignResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Signs the passed transaction with a key from the wallet, determined by the sender encoded in the transaction.
        /// </summary>
        /// <param name="signTransactionRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTTransactionSignResponse response from the API call</return>
        public Models.APIV1POSTTransactionSignResponse CreateSignTransaction(Models.SignTransactionRequest signTransactionRequest)
        {
            Task<Models.APIV1POSTTransactionSignResponse> t = CreateSignTransactionAsync(signTransactionRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Signs the passed transaction with a key from the wallet, determined by the sender encoded in the transaction.
        /// </summary>
        /// <param name="signTransactionRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTTransactionSignResponse response from the API call</return>
        public async Task<Models.APIV1POSTTransactionSignResponse> CreateSignTransactionAsync(Models.SignTransactionRequest signTransactionRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/transaction/sign");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(signTransactionRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTTransactionSignResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create a new wallet (collection of keys) with the given parameters.
        /// </summary>
        /// <param name="createWalletRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletResponse response from the API call</return>
        public Models.APIV1POSTWalletResponse CreateWallet(Models.CreateWalletRequest createWalletRequest)
        {
            Task<Models.APIV1POSTWalletResponse> t = CreateWalletAsync(createWalletRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create a new wallet (collection of keys) with the given parameters.
        /// </summary>
        /// <param name="createWalletRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletResponse response from the API call</return>
        public async Task<Models.APIV1POSTWalletResponse> CreateWalletAsync(Models.CreateWalletRequest createWalletRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/wallet");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(createWalletRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTWalletResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns information about the wallet associated with the passed wallet handle token. Additionally returns expiration information about the token itself.
        /// </summary>
        /// <param name="getWalletInfoRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletInfoResponse response from the API call</return>
        public Models.APIV1POSTWalletInfoResponse CreateGetWalletInfo(Models.WalletInfoRequest getWalletInfoRequest)
        {
            Task<Models.APIV1POSTWalletInfoResponse> t = CreateGetWalletInfoAsync(getWalletInfoRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns information about the wallet associated with the passed wallet handle token. Additionally returns expiration information about the token itself.
        /// </summary>
        /// <param name="getWalletInfoRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletInfoResponse response from the API call</return>
        public async Task<Models.APIV1POSTWalletInfoResponse> CreateGetWalletInfoAsync(Models.WalletInfoRequest getWalletInfoRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/wallet/info");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(getWalletInfoRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTWalletInfoResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Unlock the wallet and return a wallet handle token that can be used for subsequent operations. These tokens expire periodically and must be renewed. You can `POST` the token to `/v1/wallet/info` to see how much time remains until expiration, and renew it with `/v1/wallet/renew`. When you're done, you can invalidate the token with `/v1/wallet/release`.
        /// </summary>
        /// <param name="initializeWalletHandleTokenRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletInitResponse response from the API call</return>
        public Models.APIV1POSTWalletInitResponse CreateInitWalletHandleToken(Models.InitWalletHandleTokenRequest initializeWalletHandleTokenRequest)
        {
            Task<Models.APIV1POSTWalletInitResponse> t = CreateInitWalletHandleTokenAsync(initializeWalletHandleTokenRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Unlock the wallet and return a wallet handle token that can be used for subsequent operations. These tokens expire periodically and must be renewed. You can `POST` the token to `/v1/wallet/info` to see how much time remains until expiration, and renew it with `/v1/wallet/renew`. When you're done, you can invalidate the token with `/v1/wallet/release`.
        /// </summary>
        /// <param name="initializeWalletHandleTokenRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletInitResponse response from the API call</return>
        public async Task<Models.APIV1POSTWalletInitResponse> CreateInitWalletHandleTokenAsync(Models.InitWalletHandleTokenRequest initializeWalletHandleTokenRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/wallet/init");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(initializeWalletHandleTokenRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTWalletInitResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Invalidate the passed wallet handle token, making it invalid for use in subsequent requests.
        /// </summary>
        /// <param name="releaseWalletHandleTokenRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletReleaseResponse response from the API call</return>
        public Models.APIV1POSTWalletReleaseResponse CreateReleaseWalletHandleToken(Models.ReleaseWalletHandleTokenRequest releaseWalletHandleTokenRequest)
        {
            Task<Models.APIV1POSTWalletReleaseResponse> t = CreateReleaseWalletHandleTokenAsync(releaseWalletHandleTokenRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Invalidate the passed wallet handle token, making it invalid for use in subsequent requests.
        /// </summary>
        /// <param name="releaseWalletHandleTokenRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletReleaseResponse response from the API call</return>
        public async Task<Models.APIV1POSTWalletReleaseResponse> CreateReleaseWalletHandleTokenAsync(Models.ReleaseWalletHandleTokenRequest releaseWalletHandleTokenRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/wallet/release");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(releaseWalletHandleTokenRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTWalletReleaseResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Rename the underlying wallet to something else
        /// </summary>
        /// <param name="renameWalletRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletRenameResponse response from the API call</return>
        public Models.APIV1POSTWalletRenameResponse CreateRenameWallet(Models.RenameWalletRequest renameWalletRequest)
        {
            Task<Models.APIV1POSTWalletRenameResponse> t = CreateRenameWalletAsync(renameWalletRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Rename the underlying wallet to something else
        /// </summary>
        /// <param name="renameWalletRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletRenameResponse response from the API call</return>
        public async Task<Models.APIV1POSTWalletRenameResponse> CreateRenameWalletAsync(Models.RenameWalletRequest renameWalletRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/wallet/rename");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(renameWalletRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTWalletRenameResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Renew a wallet handle token, increasing its expiration duration to its initial value
        /// </summary>
        /// <param name="renewWalletHandleTokenRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletRenewResponse response from the API call</return>
        public Models.APIV1POSTWalletRenewResponse CreateRenewWalletHandleToken(Models.RenewWalletHandleTokenRequest renewWalletHandleTokenRequest)
        {
            Task<Models.APIV1POSTWalletRenewResponse> t = CreateRenewWalletHandleTokenAsync(renewWalletHandleTokenRequest);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Renew a wallet handle token, increasing its expiration duration to its initial value
        /// </summary>
        /// <param name="renewWalletHandleTokenRequest">Required parameter: Example: </param>
        /// <return>Returns the Models.APIV1POSTWalletRenewResponse response from the API call</return>
        public async Task<Models.APIV1POSTWalletRenewResponse> CreateRenewWalletHandleTokenAsync(Models.RenewWalletHandleTokenRequest renewWalletHandleTokenRequest)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/wallet/renew");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //append body params
            var _body = APIHelper.JsonSerialize(renewWalletHandleTokenRequest);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1POSTWalletRenewResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Lists all of the wallets that kmd is aware of.
        /// </summary>
        /// <return>Returns the Models.APIV1GETWalletsResponse response from the API call</return>
        public Models.APIV1GETWalletsResponse ListWallets()
        {
            Task<Models.APIV1GETWalletsResponse> t = ListWalletsAsync();
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Lists all of the wallets that kmd is aware of.
        /// </summary>
        /// <return>Returns the Models.APIV1GETWalletsResponse response from the API call</return>
        public async Task<Models.APIV1GETWalletsResponse> ListWalletsAsync()
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/wallets");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.APIV1GETWalletsResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieves the current version
        /// </summary>
        /// <return>Returns the Models.VersionsResponse response from the API call</return>
        public Models.VersionsResponse GetVersion()
        {
            Task<Models.VersionsResponse> t = GetVersionAsync();
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieves the current version
        /// </summary>
        /// <return>Returns the Models.VersionsResponse response from the API call</return>
        public async Task<Models.VersionsResponse> GetVersionAsync()
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/versions");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("X-KMD-API-Token", Configuration.XKMDAPIToken);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.VersionsResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 